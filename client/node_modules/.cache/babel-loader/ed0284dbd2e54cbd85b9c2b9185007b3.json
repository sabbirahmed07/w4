{"ast":null,"code":"import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\"; //Register User\n\nexport var registeruser = function registeruser(userData, history) {\n  return function (dispatch) {\n    axios.post(\"/api/users/register\", userData).then(function (res) {\n      return history.push(\"/login\");\n    }).catch(function (err) {\n      return dispatch({\n        type: actionTypes.GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; //login - get user token\n\nexport var loginuser = function loginuser(userData) {\n  return function (dispatch) {\n    axios.post(\"/api/users/login\", userData).then(function (res) {\n      //save to local storage\n      var token = res.data.token; //set token to local storage\n\n      localStorage.setItem(\"jwtToken\", token); //set token to auth header\n\n      setAuthToken(token); //decode toke to get user data\n\n      var decoded = jwt_decode(token); //set current user\n\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      return dispatch({\n        type: actionTypes.GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; //set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: actionTypes.SET_CURRENT_USER,\n    payload: decoded\n  };\n}; //log user out\n\nexport var logoutuser = function logoutuser() {\n  return function (dispatch) {\n    //remove token from local storage\n    localStorage.removeItem(\"jwtToken\"); //remove the auth header for future req\n\n    setAuthToken(false); //set the current user {} which is set authenticated to false\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["/home/sabbir/Downloads/bishudigital-master/client/src/redux/actions/authActions.js"],"names":["actionTypes","axios","setAuthToken","jwt_decode","registeruser","userData","history","dispatch","post","then","res","push","catch","err","type","GET_ERRORS","payload","response","data","loginuser","token","localStorage","setItem","decoded","setCurrentUser","SET_CURRENT_USER","logoutuser","removeItem"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,QAAD,EAAWC,OAAX;AAAA,SAAuB,UAAAC,QAAQ,EAAI;AAC7DN,IAAAA,KAAK,CACFO,IADH,CACQ,qBADR,EAC+BH,QAD/B,EAEGI,IAFH,CAEQ,UAAAC,GAAG;AAAA,aAAIJ,OAAO,CAACK,IAAR,CAAa,QAAb,CAAJ;AAAA,KAFX,EAGGC,KAHH,CAGS,UAAAC,GAAG;AAAA,aACRN,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEd,WAAW,CAACe,UADX;AAEPC,QAAAA,OAAO,EAAEH,GAAG,CAACI,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAHZ;AASD,GAV2B;AAAA,CAArB,C,CAYP;;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAd,QAAQ;AAAA,SAAI,UAAAE,QAAQ,EAAI;AAC/CN,IAAAA,KAAK,CACFO,IADH,CACQ,kBADR,EAC4BH,QAD5B,EAEGI,IAFH,CAEQ,UAAAC,GAAG,EAAI;AACX;AADW,UAEHU,KAFG,GAEOV,GAAG,CAACQ,IAFX,CAEHE,KAFG,EAGX;;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAJW,CAKX;;AACAlB,MAAAA,YAAY,CAACkB,KAAD,CAAZ,CANW,CAOX;;AACA,UAAMG,OAAO,GAAGpB,UAAU,CAACiB,KAAD,CAA1B,CARW,CASX;;AACAb,MAAAA,QAAQ,CAACiB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,KAbH,EAcGX,KAdH,CAcS,UAAAC,GAAG;AAAA,aACRN,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAEd,WAAW,CAACe,UADX;AAEPC,QAAAA,OAAO,EAAEH,GAAG,CAACI,QAAJ,CAAaC;AAFf,OAAD,CADA;AAAA,KAdZ;AAoBD,GArBgC;AAAA,CAA1B,C,CAuBP;;AACA,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAAAD,OAAO,EAAI;AACvC,SAAO;AACLT,IAAAA,IAAI,EAAEd,WAAW,CAACyB,gBADb;AAELT,IAAAA,OAAO,EAAEO;AAFJ,GAAP;AAID,CALM,C,CAOP;;AAEA,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAnB,QAAQ,EAAI;AAC1C;AACAc,IAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACAzB,IAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAK,IAAAA,QAAQ,CAACiB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,GAPyB;AAAA,CAAnB","sourcesContent":["import * as actionTypes from \"./actionTypes\";\nimport axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\n//Register User\nexport const registeruser = (userData, history) => dispatch => {\n  axios\n    .post(\"/api/users/register\", userData)\n    .then(res => history.push(\"/login\"))\n    .catch(err =>\n      dispatch({\n        type: actionTypes.GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n//login - get user token\nexport const loginuser = userData => dispatch => {\n  axios\n    .post(\"/api/users/login\", userData)\n    .then(res => {\n      //save to local storage\n      const { token } = res.data;\n      //set token to local storage\n      localStorage.setItem(\"jwtToken\", token);\n      //set token to auth header\n      setAuthToken(token);\n      //decode toke to get user data\n      const decoded = jwt_decode(token);\n      //set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: actionTypes.GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n//set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: actionTypes.SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n//log user out\n\nexport const logoutuser = () => dispatch => {\n  //remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  //remove the auth header for future req\n  setAuthToken(false);\n  //set the current user {} which is set authenticated to false\n  dispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}